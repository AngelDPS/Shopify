AWSTemplateFormatVersion: "2010-09-09"
Description: >-
  Template de manejo de la tienda en Shopify

Transform: "AWS::Serverless-2016-10-31"

Parameters:
  NombreCompania:
    Type: String
  IndexCompania:
    Type: String
  DynamoTable:
    Type: String
  DynamoStream:
    Type: String
  MyLayer:
    Type: String
  Fase:
    Type: String

Resources:
  PipeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - pipes.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: SourcePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:DescribeStream"
                  - "dynamodb:GetRecords"
                  - "dynamodb:GetShardIterator"
                  - "dynamodb:ListStreams"
                Resource: !Ref DynamoStream
        - PolicyName: TargetPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'states:StartExecution'
                  - 'states:StartSyncExecution'
                Resource: !GetAtt ActualizarArticulosShopifyStateMachine.Arn

  MySqsShopifyQueue:
    Type: AWS::SQS::Queue
    Properties:
      FifoQueue: True
      QueueName: !Join ["-", [!Ref NombreCompania, !Ref Fase, "SQSShopify", ".fifo"]]
      VisibilityTimeout: 30
      MessageRetentionPeriod: 345600
      DelaySeconds: 0
      ContentBasedDeduplication: True
      DeduplicationScope: queue
      Tags:
        - Key: "company"
          Value: !Ref NombreCompania


  Pipe:
    Type: AWS::Pipes::Pipe
    Properties:
      Name:
        !Join ["-", [!Ref NombreCompania, !Ref Fase, "PipeShopify"]]
      Description: "Pipe se encarga de ejecutar un StepFuntion para actualizar articulos en Shopify"
      RoleArn: !GetAtt PipeRole.Arn
      Source: !Ref DynamoStream
      SourceParameters:
        FilterCriteria:
          Filters:
            - Pattern: !Sub '{"dynamodb": {"NewImage": {"entity": {"S": [{"prefix": "articulos"}]}}}}'
        DynamoDBStreamParameters:
          StartingPosition: TRIM_HORIZON
          BatchSize: 1
      Target: !GetAtt ActualizarArticulosShopifyStateMachine.Arn
      TargetParameters:
        StepFunctionStateMachineParameters:
          InvocationType: FIRE_AND_FORGET
      Tags:
        company: !Ref NombreCompania

  ActualizarArticulosShopifyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName:
        !Join [
          "-",
          [!Ref NombreCompania, !Ref Fase, "ActualizarArticulosShopifyFuncion"],
        ]
      CodeUri: ./
      Handler: init.lambda_handler
      MemorySize: 128
      Timeout: 15
      Tags:
        company: !Ref NombreCompania
      Runtime: python3.10    # <<--- PENDIENTE CON ESTO
      Architectures:
        - x86_64
      Layers:
        - arn:aws:lambda:us-east-2:276507440195:layer:LayerShopify:2
        - arn:aws:lambda:us-east-2:017000801446:layer:AWSLambdaPowertoolsPythonV2:34
      Environment:
        Variables:
          NOMBRE_COMPANIA: !Ref NombreCompania
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DynamoTable
        - SSMParameterReadPolicy:
            ParameterName: !Sub "akia9/akiastock/${NombreCompania}"
        - SSMParameterReadPolicy:
            ParameterName: "akia9/akiastock/global"
        - SQSPollerPolicy:
            QueueName: !Sub "${NombreCompania}-Dev-SQSShopify-.fifo"
        - S3FullAccessPolicy:
            BucketName: !Sub "${NombreCompania}"
            
  # # --> Step function
  ActualizarArticulosShopifyStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Join ["-", [!Ref IndexCompania, !Ref Fase, "StateMachineActualizarArticulosShopify"]]
      Type: EXPRESS
      DefinitionUri: ./statemachine.asl.json
      DefinitionSubstitutions:
        FunctionArn: !GetAtt ActualizarArticulosShopifyFunction.Arn
        SQSUrl: !Ref MySqsShopifyQueue
        SNSErrorReportArn: "ARN Del SNS de reportes de errores"
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref ActualizarArticulosShopifyFunction
        - CloudWatchLogsFullAccess
        - SNSPublishMessagePolicy:
            TopicName: SNSErrores
      Tags:
        company: !Ref NombreCompania

